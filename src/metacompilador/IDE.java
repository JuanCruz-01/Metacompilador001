package metacompilador;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.Set;
import java.util.LinkedHashSet;
import java.util.Arrays;
import java.util.Comparator;
import org.codehaus.janino.SimpleCompiler;
import org.codehaus.janino.Scanner;

public class IDE extends javax.swing.JFrame {

    NumeroLinea numeroLinea;
    ErrorStorage errorStorage;
    private File currentFile = null;
    private boolean fileChanged = false;
    private TablaSimbolos tablaSimbolos;
    private Lexer lexer;

    public IDE() {
        initComponents();
        setTitle("METACOMPILADOR - Archivo 1");

        numeroLinea = new NumeroLinea(jtpCode);
        errorStorage = new ErrorStorage();
        jScrollPane1.setRowHeaderView(numeroLinea);
        this.tablaSimbolos = new TablaSimbolos();
        TokenStorage storage = new TokenStorage();
        this.lexer = new Lexer(storage);

        // Deshabilita la edición en el JTextPane
        jTextPane1.setEditable(false);

        // Agregar DocumentListener al JTextPane para rastrear cambios
        addDocumentListener();
    }

    private TokenStorage storage;

    private void addDocumentListener() {
        jtpCode.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {

                fileChanged = true;
            }

            @Override
            public void removeUpdate(DocumentEvent e) {

                fileChanged = true;
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // Este evento se refiere a cambios en atributos, no al texto
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtpCode = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu14 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenu15 = new javax.swing.JMenu();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenuItem26 = new javax.swing.JMenuItem();
        jMenuItem25 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem22 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtpCode.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(jtpCode);

        jTextPane1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jScrollPane2.setViewportView(jTextPane1);

        jMenu6.setText("Archivo");

        jMenuItem4.setText("Nuevo");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem4);

        jMenuItem2.setText("Abrir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem2);

        jMenuItem5.setText("Cerrar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem5);

        jMenuItem3.setText("Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem3);

        jMenuItem6.setText("Guardar como");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem6);

        jMenuItem1.setText("Salir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem1);

        jMenuBar1.add(jMenu6);

        jMenu2.setText("Edición");

        jMenuItem7.setText("Cortar");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setText("Copiar");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem9.setText("Pegar");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Tablas");

        jMenu1.setText("Tablas estáticas");

        jMenuItem19.setText("Tabla de palabras reservadas");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem19);

        jMenuItem20.setText("Tabla de caracteres especiales");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem20);

        jMenuItem21.setText("Tablas de operadores");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem21);

        jMenu3.add(jMenu1);

        jMenu7.setText("Tablas dinámicas");

        jMenuItem10.setText("Tabla de simbolos");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem10);

        jMenuItem11.setText("Tabla de identificadores");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem11);

        jMenuItem12.setText("Tabla de errores");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem12);

        jMenu14.setText("Tabla de constantes numericas");

        jMenuItem13.setText("Enteros");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu14.add(jMenuItem13);

        jMenuItem14.setText("Reales");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu14.add(jMenuItem14);

        jMenuItem15.setText("Cientificos");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu14.add(jMenuItem15);

        jMenu7.add(jMenu14);

        jMenu15.setText("Tabla de constantes no numericas");

        jMenuItem16.setText("Caracteres");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem16);

        jMenuItem17.setText("Cadenas");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem17);

        jMenu7.add(jMenu15);

        jMenu3.add(jMenu7);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Análisis");

        jMenuItem24.setText("Lexico");
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem24ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem24);

        jMenuItem26.setText("Sintactico");
        jMenuItem26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem26ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem26);

        jMenuItem25.setText("Semantico");
        jMenuItem25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem25ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem25);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Acerca de");

        jMenuItem18.setText("Integrantes del proyecto");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem18);

        jMenuBar1.add(jMenu5);

        jMenu8.setText("Ejecución");

        jMenuItem22.setText("Ejecutar código");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem22);

        jMenuBar1.add(jMenu8);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mostrarVentanaIntegrantes() {
        VentanaIntegrantes ventana = new VentanaIntegrantes();
        ventana.setVisible(true);
    }

    private void ejecutarCodigo() {
    jTextPane1.setText("");

        PrintStream printStream = null;
        try {
            printStream = new PrintStream(new TextPaneOutputStream(jTextPane1), true, "UTF-8");
            System.setOut(printStream);
            System.setErr(printStream);
        } catch (UnsupportedEncodingException e) {
            jTextPane1.setText("Error de codificación: " + e.getMessage());
            return;
        }

        String codigo = jtpCode.getText();

        String fullCode = "public class DynamicClass { public static void main(String[] args) { " + codigo + " } }";

        SimpleCompiler compiler = new SimpleCompiler();

        try {

            Scanner scanner = new Scanner(null, new StringReader(fullCode));

            compiler.cook(scanner);

            Class<?> compiledClass = compiler.getClassLoader().loadClass("DynamicClass");
            compiledClass.getMethod("main", String[].class).invoke(null, (Object) new String[]{});

        } catch (Exception e) {

            jTextPane1.setText("Error en la ejecución: " + e.getMessage());
        }
}


private String reemplazarNombreClase(String codigo, String nuevoNombreClase) {

    return codigo.replaceFirst("public\\s+class\\s+\\w+", "public class " + nuevoNombreClase);
}



    private void mostrarTablaIdentificadores(TokenStorage storage) {

        List<Token> identificadores = storage.obtenerTokensPorTabla("identificadores");

        TablaIdentificadores tablaIdentificadores = new TablaIdentificadores();

        DefaultTableModel model = (DefaultTableModel) tablaIdentificadores.getTableModel();

        model.setRowCount(0);

        for (Token token : identificadores) {
            model.addRow(token.toArray());
        }

        tablaIdentificadores.setVisible(true);
    }

    private void mostrarTablaEnteros(TokenStorage storage) {

        List<Token> enteros = storage.obtenerTokensPorTabla("enteros");

        TablaEnteros tablaEnteros = new TablaEnteros();

        DefaultTableModel model = (DefaultTableModel) tablaEnteros.getTableModel();

        model.setRowCount(0);

        for (Token token : enteros) {
            model.addRow(token.toArray());
        }

        tablaEnteros.setVisible(true);
    }

    private void mostrarTablaReales(TokenStorage storage) {

        List<Token> reales = storage.obtenerTokensPorTabla("reales");

        TablaReales tablaReales = new TablaReales();

        DefaultTableModel model = (DefaultTableModel) tablaReales.getTableModel();

        model.setRowCount(0);

        for (Token token : reales) {
            model.addRow(token.toArray());
        }

        tablaReales.setVisible(true);
    }

    private void mostrarTablaCientificos(TokenStorage storage) {

        List<Token> cientificos = storage.obtenerTokensPorTabla("cientificos");

        TablaCientifico tablaCientifico = new TablaCientifico();

        DefaultTableModel model = (DefaultTableModel) tablaCientifico.getTableModel();

        model.setRowCount(0);

        for (Token token : cientificos) {
            model.addRow(token.toArray());
        }

        tablaCientifico.setVisible(true);
    }

    private void mostrarTablaCaracteres(TokenStorage storage) {

        List<Token> caracteres = storage.obtenerTokensPorTabla("caracteres");

        TablaCaracteres tablaCaracteres = new TablaCaracteres();

        DefaultTableModel model = (DefaultTableModel) tablaCaracteres.getTableModel();

        model.setRowCount(0);

        for (Token token : caracteres) {
            model.addRow(token.toArray());
        }

        tablaCaracteres.setVisible(true);
    }

    private void mostrarTablaCadenas(TokenStorage storage) {

        List<Token> strings = storage.obtenerTokensPorTabla("strings");

        TablaCadenas tablaCadenas = new TablaCadenas();

        DefaultTableModel model = (DefaultTableModel) tablaCadenas.getTableModel();

        model.setRowCount(0);

        for (Token token : strings) {
            model.addRow(token.toArray());
        }

        tablaCadenas.setVisible(true);
    }

    private static final Map<String, String> tipoTokenDescripcion = Map.of(
            "1", "Palabra reservada",
            "2", "Carácter especial",
            "3", "Operador",
            "4", "Identificador",
            "5", "Entero",
            "6", "Real",
            "7", "Científico",
            "8", "Caracter",
            "9", "Cadena"
    );

    private void mostrarTablaSimbolos() {

        DefaultTableModel model = (DefaultTableModel) tablaSimbolos.getTableModel();
        
        model.setRowCount(0);

        List<Token> todosTokens = storage.obtenerTodosTokens();
        todosTokens.sort(Comparator.comparingInt(t -> t.getLineas().get(0)));

        int idGeneral = 1;
        for (Token token : todosTokens) {
            Object[] row = new Object[]{
                idGeneral++,
                token.getToken(),
                token.getAlias(),
                token.getLineas().stream().map(String::valueOf).collect(Collectors.joining(",")),
                token.getId(),
                tipoTokenDescripcion.getOrDefault(token.getAlias(), "Tipo desconocido") // Usa el mapa para obtener la descripción
            };
            model.addRow(row);
        }

        tablaSimbolos.setVisible(true);
    }

    private void mostrarTablaErrores(ErrorStorage errorStorage) {

        TablaErrores tablaErrores = new TablaErrores();

        DefaultTableModel model = (DefaultTableModel) tablaErrores.getTableModel();

        model.setRowCount(0);

        List<Error> errores = errorStorage.obtenerErrores();

        for (Error error : errores) {
            model.addRow(error.toArray());
        }

        tablaErrores.setVisible(true);
    }

// Clase para redirigir la salida a un JTextPane
    public class TextPaneOutputStream extends java.io.OutputStream {

        private final JTextPane textPane;
        private final StyledDocument doc;

        public TextPaneOutputStream(JTextPane textPane) {
            this.textPane = textPane;
            this.doc = textPane.getStyledDocument(); // Usar StyledDocument para manejar mejor los textos
        }

        @Override
        public void write(int b) {
            try {
                // Añadir el texto al JTextPane usando el documento estilo para manejar correctamente los caracteres
                doc.insertString(doc.getLength(), String.valueOf((char) b), null);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
        }
    }

    private void copiarTexto() {
        // Obtiene el texto seleccionado en el JTextPane
        String selectedText = jtpCode.getSelectedText();

        // Verifica si hay texto seleccionado
        if (selectedText != null && !selectedText.isEmpty()) {
            // Obtiene el portapapeles del sistema
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();

            // Crea un objeto de transferencia de texto
            Transferable selection = new StringSelection(selectedText);

            // Coloca el texto en el portapapeles
            clipboard.setContents(selection, null);
        }
    }

    private void cortarTexto() {
        // Obtiene el texto seleccionado en el JTextPane
        String selectedText = jtpCode.getSelectedText();

        // Verifica si hay texto seleccionado
        if (selectedText != null && !selectedText.isEmpty()) {
            // Obtiene el portapapeles del sistema
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();

            // Crea un objeto de transferencia de texto
            Transferable selection = new StringSelection(selectedText);

            // Coloca el texto en el portapapeles
            clipboard.setContents(selection, null);

            // Elimina el texto seleccionado del JTextPane
            jtpCode.replaceSelection("");
        }
    }

    private void pegarTexto() {
        // Obtiene el portapapeles del sistema
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();

        // Obtiene el contenido actual del portapapeles
        Transferable clipData = clipboard.getContents(clipboard);

        if (clipData.isDataFlavorSupported(DataFlavor.stringFlavor)) {
            try {
                // Obtiene el texto desde el portapapeles
                String clipboardText = (String) clipData.getTransferData(DataFlavor.stringFlavor);

                // Obtiene la posición actual del cursor en el JTextPane
                int caretPosition = jtpCode.getCaretPosition();

                // Inserta el texto desde el portapapeles en la ubicación del cursor
                jtpCode.getDocument().insertString(caretPosition, clipboardText, null);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    private void guardar() {
        if (currentFile != null) {
            // El archivo ya existe, guarda los cambios
            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter(currentFile));
                writer.write(jtpCode.getText());
                writer.close();

                setTitle("METACOMPLIADOR - " + currentFile.getName());
                fileChanged = false; // Marcamos que no hay cambios sin guardar
                // JOptionPane.showMessageDialog(this, "Cambios guardados exitosamente.");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar los cambios.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // El archivo no existe, ejecuta "Guardar como"
            guardarComo();
        }
    }

    public TokenStorage ejecutarAnalisisLexico(String codigo) {

        TokenStorage storage = new TokenStorage();

        Lexer lexer = new Lexer(storage);
        lexer.analizarCodigo(codigo);

        return storage;
    }

    private void guardarComo() {
        JFileChooser fileChooser = new JFileChooser();

        int option = fileChooser.showSaveDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            if (!selectedFile.getName().toLowerCase().endsWith(".txt")) {
                selectedFile = new File(selectedFile.getPath() + ".txt");
            }

            if (selectedFile.exists()) {
                int response = JOptionPane.showConfirmDialog(this, "El archivo ya existe. ¿Desea sobrescribirlo?", "Confirmar", JOptionPane.YES_NO_OPTION);
                if (response != JOptionPane.YES_OPTION) {
                    return;
                }
            }

            try {
                FileWriter fileWriter = new FileWriter(selectedFile);
                jtpCode.write(fileWriter);
                fileWriter.close();
                currentFile = selectedFile;
                setTitle("METACOMPLIADOR - " + currentFile.getName());
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void cerrarArchivo() {
        if (fileChanged) {
            int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea guardar los cambios antes de cerrar?", "Guardar Cambios", JOptionPane.YES_NO_CANCEL_OPTION);

            if (respuesta == JOptionPane.YES_OPTION) {
                guardar();
            } else if (respuesta == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }

        jtpCode.setVisible(false);
        numeroLinea.setVisible(false);
        jMenuBar1.setVisible(true);
        currentFile = null;
        setTitle("METACOMPILADOR");
        repaint();
    }

    private void nuevoArchivo() {
        if (fileChanged) {
            int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea guardar los cambios antes de crear un nuevo archivo?", "Guardar Cambios", JOptionPane.YES_NO_CANCEL_OPTION);

            if (respuesta == JOptionPane.YES_OPTION) {
                guardar();
            } else if (respuesta == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }

        // Ahora puedes crear un nuevo archivo en blanco
        jtpCode.setText("");
        currentFile = null;
        setTitle("METACOMPILADOR - Archivo 1");
        jtpCode.setVisible(true);
        numeroLinea.setVisible(true);
        fileChanged = false;
    }

    private void abrirArchivo() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de Texto", "txt"));

        int option = fileChooser.showOpenDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            try {
                FileReader fileReader = new FileReader(selectedFile);
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                StringBuilder content = new StringBuilder();
                String line;

                while ((line = bufferedReader.readLine()) != null) {
                    content.append(line).append("\n");
                }

                jtpCode.setText(content.toString());
                currentFile = selectedFile;
                jtpCode.setVisible(true);
                numeroLinea.setVisible(true);
                setTitle("METACOMPLIADOR - " + currentFile.getName());

                fileChanged = false;
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error al abrir el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void mostrarVentanaPalabrasReservadas(Lexer lexer) {
        String[] cabezera = {"ID", "TOKEN", "ALIAS"};
        List<String[]> datosList = new ArrayList<>();

        Map<String, Integer> palabrasReservadasIds = lexer.getPalabrasReservadasIds();

        // Ordena los tokens por ID para mostrarlos en orden
        palabrasReservadasIds.entrySet().stream()
                .sorted(Map.Entry.comparingByValue())
                .forEach(entry -> {
                    String[] row = {entry.getValue().toString(), entry.getKey(), "1"};
                    datosList.add(row);
                });

        String[][] datos = datosList.toArray(new String[0][]);

        DefaultTableModel mod = new DefaultTableModel(datos, cabezera);

        JTable tabla = new JTable(mod);

        JScrollPane scroll = new JScrollPane(tabla);
        scroll.setBounds(40, 40, 400, 300);

        JFrame ventanaPalabrasReservadas = new JFrame();
        ventanaPalabrasReservadas.setLayout(null);
        ventanaPalabrasReservadas.setSize(500, 500);
        ventanaPalabrasReservadas.setLocationRelativeTo(null);
        ventanaPalabrasReservadas.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        ventanaPalabrasReservadas.add(scroll);

        ventanaPalabrasReservadas.setVisible(true);
    }

    private void mostrarVentanaCaracteres(Lexer lexer) {
        String[] cabezera = {"ID", "TOKEN", "ALIAS"};
        List<String[]> datosList = new ArrayList<>();

        Map<String, Integer> caracteresEspecialesIds = lexer.getCaracteresEspecialesIds();

        // Ordena los tokens por ID para mostrarlos en orden
        caracteresEspecialesIds.entrySet().stream()
                .sorted(Map.Entry.comparingByValue())
                .forEach(entry -> {
                    String[] row = {entry.getValue().toString(), entry.getKey(), "2"};
                    datosList.add(row);
                });

        String[][] datos = datosList.toArray(new String[0][]);

        DefaultTableModel mod = new DefaultTableModel(datos, cabezera);

        JTable tabla = new JTable(mod);

        JScrollPane scroll = new JScrollPane(tabla);
        scroll.setBounds(40, 40, 600, 300);

        JFrame ventanaCaracteres = new JFrame();
        ventanaCaracteres.setLayout(null);
        ventanaCaracteres.setSize(700, 500);
        ventanaCaracteres.setLocationRelativeTo(null);
        ventanaCaracteres.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        ventanaCaracteres.add(scroll);

        ventanaCaracteres.setVisible(true);
    }

    public void resetAndAddSignificadoColumn() {
        if (tablaSimbolos != null) {
            tablaSimbolos.resetAndAddSignificadoColumn();
        }
    }
    
    public void removeSignificadoColumn() {
        if (tablaSimbolos != null) {
            tablaSimbolos.removeSignificadoColumnIfPresent();
        }
    }

    private void mostrarVentanaOperadores(Lexer lexer) {
        String[] cabezera = {"ID", "TOKEN", "ALIAS"};
        List<String[]> datosList = new ArrayList<>();

        Map<String, Integer> operadoresIds = lexer.getOperadoresIds();

        // Ordena los tokens por ID para mostrarlos en orden
        operadoresIds.entrySet().stream()
                .sorted(Map.Entry.comparingByValue())
                .forEach(entry -> {
                    String[] row = {entry.getValue().toString(), entry.getKey(), "3"};
                    datosList.add(row);
                });

        String[][] datos = datosList.toArray(new String[0][]);

        DefaultTableModel mod = new DefaultTableModel(datos, cabezera);

        JTable tabla = new JTable(mod);

        JScrollPane scroll = new JScrollPane(tabla);
        scroll.setBounds(40, 40, 400, 300);

        JFrame ventanaPalabrasReservadas = new JFrame();
        ventanaPalabrasReservadas.setLayout(null);
        ventanaPalabrasReservadas.setSize(500, 500);
        ventanaPalabrasReservadas.setLocationRelativeTo(null);
        ventanaPalabrasReservadas.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        ventanaPalabrasReservadas.add(scroll);

        ventanaPalabrasReservadas.setVisible(true);
    }


    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        nuevoArchivo();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        if (fileChanged) {
            int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea guardar los cambios antes de abrir un nuevo archivo?", "Guardar Cambios", JOptionPane.YES_NO_CANCEL_OPTION);

            if (respuesta == JOptionPane.YES_OPTION) {
                guardar();
            } else if (respuesta == JOptionPane.CANCEL_OPTION) {
                // El usuario canceló la operación, no se abrirá un nuevo archivo
                return;
            }
        }

        abrirArchivo();


    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        cerrarArchivo();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        guardar();
        fileChanged = false;
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        guardarComo();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        // Verificar si hay cambios sin guardar
        if (fileChanged) {
            int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea guardar los cambios antes de salir?", "Guardar Cambios", JOptionPane.YES_NO_CANCEL_OPTION);

            if (respuesta == JOptionPane.YES_OPTION) {
                guardar();
            } else if (respuesta == JOptionPane.CANCEL_OPTION) {
                // El usuario canceló la operación, no se cierra la aplicación
                return;
            }
        }
        System.exit(0); // Cierra la aplicación


    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        cortarTexto();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        copiarTexto();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        pegarTexto();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        mostrarVentanaPalabrasReservadas(lexer);
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        mostrarVentanaIntegrantes();
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jMenuItem24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem24ActionPerformed
        storage = ejecutarAnalisisLexico(jtpCode.getText());
        errorStorage.limpiarErrores();
        jTextPane1.setText("");
        removeSignificadoColumn();
        

        jTextPane1.setText("Análisis léxico ejecutado");
    }//GEN-LAST:event_jMenuItem24ActionPerformed

    private void jMenuItem26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem26ActionPerformed
        errorStorage.limpiarErroresSintacticos();
        jTextPane1.setText("");
        SintaxisChecker sintaxisChecker = new SintaxisChecker(errorStorage);
        String codigo = jtpCode.getText();
        sintaxisChecker.verificarSintaxis(codigo);
        List<Error> errores = errorStorage.obtenerErroresSintacticos();
        if (errores.isEmpty()) {
            jTextPane1.setText("Análisis sintáctico ejecutado. No se encontraron errores sintácticos.");

        } else {

            StringBuilder resultado = new StringBuilder();
            resultado.append("Análisis sintáctico ejecutado con errores:\n");
            for (Error error : errores) {
                resultado.append("Línea ").append(error.getLinea()).append(": ").append(error.getDescripcion()).append("\n");
            }
            jTextPane1.setText(resultado.toString());
        }
    }//GEN-LAST:event_jMenuItem26ActionPerformed

    private void jMenuItem25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem25ActionPerformed
        jTextPane1.setText("");
        SemanticaChecker semanticaChecker = new SemanticaChecker(errorStorage);
        String codigo = jtpCode.getText();
        semanticaChecker.verificarSemantica(codigo);
        List<Error> errores = errorStorage.obtenerErroresSemanticos();
        resetAndAddSignificadoColumn();
        if (errores.isEmpty()) {
            jTextPane1.setText("Análisis semántico ejecutado. No se encontraron errores semánticos.");

        } else {

            StringBuilder resultado = new StringBuilder();
            resultado.append("Análisis semántico ejecutado con errores:\n");
            for (Error error : errores) {
                resultado.append("Línea ").append(error.getLinea()).append(": ").append(error.getDescripcion()).append("\n");
            }
            jTextPane1.setText(resultado.toString());
        }
    }//GEN-LAST:event_jMenuItem25ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        mostrarVentanaCaracteres(lexer);
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        mostrarVentanaOperadores(lexer);
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        mostrarTablaSimbolos();
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        ejecutarCodigo();
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        mostrarTablaIdentificadores(storage);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        mostrarTablaEnteros(storage);
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        mostrarTablaReales(storage);
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        mostrarTablaCientificos(storage);
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        mostrarTablaCaracteres(storage);
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        mostrarTablaCadenas(storage);
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        mostrarTablaErrores(errorStorage);
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu15;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem26;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jtpCode;
    // End of variables declaration//GEN-END:variables
}
